library(pacman)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("pacman")
# library(pacman)
p_load(twitteR, tidyverse, wordcloud, ggplot2)
# install.packages("pacman")
# library(pacman)
p_load(twitteR, tidyverse, wordcloud, ggplot2)
consumer_key <- 'VZA8eE5AkAxVOIAf21cmoAI8f'
consumer_secret <- 'hYwhb8sqwv2FEAL4j1uCzfm8FkQlhVfdOSdRE8JrCLB40RNZmp'
access_token <- 'AAAAAAAAAAAAAAAAAAAAAGhnVQEAAAAA7jPflH89xJZ1DCcS7qeFcQc99T0%3DDSpocgeI9MyRY4SMODhZ9FbFbnQMrmH10KsB7oBVMnZM7b40QY'
setup_twitter_oauth(consumer_key,
consumer_secret,
access_token)
setup_twitter_oauth(consumer_key,
consumer_secret,
access_token,
access_secret)
access_secret <- 'UCwFQTd6Dxc8hVtCs55DgvtYlpR4I1ZFhtRZ5vOtNCYeX'
setup_twitter_oauth(consumer_key,
consumer_secret,
access_token,
access_secret)
consumer_key <- 'VZA8eE5AkAxVOIAf21cmoAI8f'
consumer_secret <- 'hYwhb8sqwv2FEAL4j1uCzfm8FkQlhVfdOSdRE8JrCLB40RNZmp'
access_token <- '1453786587813253124-IAZrtKZOmdXL3MbeHmEkRF9Zsiv49Y'
access_secret <- 'UCwFQTd6Dxc8hVtCs55DgvtYlpR4I1ZFhtRZ5vOtNCYeX'
setup_twitter_oauth(consumer_key,
consumer_secret,
access_token,
access_secret)
#Tweets que mencionan a Boric
menciones_boric <- search_tweets("@Boric", include_rts = TRUE, retryonratelimit = TRUE)
# install.packages("pacman")
# library(pacman)
p_load(twitteR, tidyverse, wordcloud, ggplot2)
#Tweets que mencionan a Boric
menciones_boric <- search_tweets("@Boric", include_rts = TRUE, retryonratelimit = TRUE)
# install.packages("pacman")
# library(pacman)
p_load(twitteR, rtweet, tidyverse, wordcloud, ggplot2)
#Tweets que mencionan a Boric
menciones_boric <- search_tweets("@Boric", include_rts = TRUE, retryonratelimit = TRUE)
#Tweets que mencionan a Boric
menciones_boric <- search_tweets("@Boric", include_rts = FALSE, retryonratelimit = TRUE)
#Tweets que mencionan a Boric
menciones_boric <- search_tweets("@gabrielboric", retryonratelimit = TRUE)
consumer_key <- 'VZA8eE5AkAxVOIAf21cmoAI8f'
consumer_secret <- 'hYwhb8sqwv2FEAL4j1uCzfm8FkQlhVfdOSdRE8JrCLB40RNZmp'
access_token <- '1453786587813253124-IAZrtKZOmdXL3MbeHmEkRF9Zsiv49Y'
access_secret <- 'UCwFQTd6Dxc8hVtCs55DgvtYlpR4I1ZFhtRZ5vOtNCYeX'
setup_twitter_oauth(consumer_key,
consumer_secret,
access_token,
access_secret)
#Tweets que mencionan a Boric
menciones_boric <- search_tweets("@gabrielboric", retryonratelimit = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# 1. Cargar librarias
# install.packages("pacman")
# library(pacman)
p_load(rtweet, tidyverse, wordcloud, ggplot2)
load("INPUT/data/proc_data/databoric.RData")
load("INPUT/data/proc_data/datakast.RData")
load("INPUT/data/proc_data/dataprovoste.RData")
load("INPUT/data/proc_data/datasichel.RData")
load("INPUT/data/proc_data/datameo.RData")
load("INPUT/data/proc_data/dataparisi.RData")
load("INPUT/data/proc_data/dataartes.RData")
# Crear df con numero de tweets
n_tweets <- data.frame("Candidates"=c("Boric","Artés","Kast", "Enríquez-Ominami",
"Parisi", "Sichel", "Provoste"),
"n_tweets"=c(13863, 11603, 28782, 18829, 13069, 14538, 14586))
# Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar(stat = "identity") +
labs(title="Figura 1: Cantidad de tweets entre el 27 de octubre y 03 de noviembre, según candidato",
caption="Elaboración propia en base a Twitter API (2021)",
xlab="Candidato/a",ylab="Cantidad de Tweets")+
geom_text(aes(label=n_tweets), vjust=-0.3, size=3.5)+
theme(legend.position = "none") +
file()
# Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar(stat = "identity") +
labs(title="Figura 1: Cantidad de tweets entre el 27 de octubre y 03 de noviembre, según candidato",
caption="Elaboración propia en base a Twitter API (2021)",
xlab="Candidato/a",ylab="Cantidad de Tweets")+
geom_text(aes(label=n_tweets), vjust=-0.3, size=3.5)+
theme(legend.position = "none")
# Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar(stat = "identity") +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
xlab="Candidato/a",ylab="Cantidad de Tweets")+
geom_text(aes(label=n_tweets), vjust=-0.3, size=3.5)+
theme(legend.position = "none")
# Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar(stat = "identity") +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
xlab="Candidato/a",ylab="Cantidad de Tweets")+
geom_text(aes(label=n_tweets), vjust=-0.3, size=3.5)+
theme(legend.position = "left")
# Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar(stat = "identity") +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
xlab="Candidato/a",ylab="Cantidad de Tweets")+
geom_text(aes(label=n_tweets), vjust=-0.3, size=3.5)
# Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar(stat = "identity") +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
xlab="Candidato/a",ylab="Cantidad de Tweets")
# Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar(stat = "identity") +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
x="Candidato/a", y="Cantidad de Tweets")
# Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar(stat = "identity") + +
scale_fill_hue(c = 40) +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
x="Candidato/a", y="Cantidad de Tweets")
# Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar(stat = "identity") +
scale_fill_hue(c = 40) +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
x="Candidato/a", y="Cantidad de Tweets")
# Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("#655A7C", "#AB92BF", "#afc1d6", "#cef9f2", "#d6ca98", "#8b9b75", "#3f6c51") ) +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
x="Candidato/a", y="Cantidad de Tweets")
# Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar(stat = "identity") +
scale_colour_manual(values = c("#655A7C", "#AB92BF", "#afc1d6", "#cef9f2", "#d6ca98", "#8b9b75", "#3f6c51") ) +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
x="Candidato/a", y="Cantidad de Tweets")
# Crear grafico de barras
n_tweet_bar <- ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar(stat = "identity") +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
x="Candidato/a", y="Cantidad de Tweets")
n_tweet_bar + scale_fill_manual(values = c("#655A7C", "#AB92BF", "#afc1d6", "#cef9f2", "#d6ca98", "#8b9b75", "#3f6c51") )
n_tweet_bar + scale_colour_manual(values = c("#655A7C", "#AB92BF", "#afc1d6", "#cef9f2", "#d6ca98", "#8b9b75", "#3f6c51") )
# Eliminar algunos carácteres que tienen los tweets
limpiar_tokenizar <- function(text){
# Todo el texto a minúsculas
nuevo_texto <- tolower(text)
# Eliminación de páginas web y de cualquier cosa que no sea un espacio
nuevo_texto <- str_replace_all(nuevo_texto,"http\\S*", "")
# Eliminación de signos de puntuación
nuevo_texto <- str_replace_all(nuevo_texto,"[[:punct:]]", " ")
# Eliminación de números
nuevo_texto <- str_replace_all(nuevo_texto,"[[:digit:]]", " ")
# Eliminación de espacios en blanco múltiples
nuevo_texto <- str_replace_all(nuevo_texto,"[\\s]+", " ")
# Tokenización por palabras individuales
nuevo_texto <- str_split(nuevo_texto, " ")[[1]]
# Eliminación de tokens con una longitud < 2
nuevo_texto <- keep(.x = nuevo_texto, .p = function(x){str_length(x) > 1})
return(nuevo_texto)
}
View(databoric)
# Tokenizar texto boric
texto_boric_df <- databoric %>% mutate(texto_tokenizado = map(.x=databoric$text,
.f=limpiar_tokenizar))
View(texto_boric_df)
# Tokenizar texto boric
databoric <- databoric %>% mutate(texto_tokenizado = map(.x=databoric$text,
.f=limpiar_tokenizar))
# Expansión de la lista de tokens
texto_boric_tidy <- databoric %>% select(texto_tokenizado) %>% unnest(cols=c(texto_tokenizado))
texto_boric_tidy <- texto_boric_tidy %>% rename(token = texto_tokenizado)
head(texto_boric_tidy)
#9.a. Tokenizar texto Boric
databoric <- databoric %>% mutate(texto_tokenizado = map(.x=databoric$text,
.f=limpiar_tokenizar))
#9.a. Tokenizar texto Boric
databoric <- databoric %>% mutate(texto_tokenizado = map(.x=databoric$text,
.f=limpiar_tokenizar))
#9.c. Tokenizar texto Kast
datakast <- datakast %>% mutate(texto_tokenizado = map(.x=datakast$text,
.f=limpiar_tokenizar))
#9.c. Tokenizar texto Kast
datakast <- datakast %>% mutate(texto_tokenizado = map(.x=datakast$text,
.f=limpiar_tokenizar))
#9.c. Tokenizar texto Provoste
dataprovoste <- dataprovoste %>% mutate(texto_tokenizado = map(.x=dataprovoste$text,
.f=limpiar_tokenizar))
#9.d. Tokenizar texto Sichel
datasichel <- datasichel %>% mutate(texto_tokenizado = map(.x=datasichel$text,
.f=limpiar_tokenizar))
#9.e. Tokenizar texto Enríquez-Ominami
datameo <- datameo %>% mutate(texto_tokenizado = map(.x=datameo$text,
.f=limpiar_tokenizar))
#9.f. Tokenizar texto Parisi
dataparisi <- dataparisi %>% mutate(texto_tokenizado = map(.x=dataparisi$text,
.f=limpiar_tokenizar))
#9.g. Tokenizar texto Artés
dataartes <- dataartes %>% mutate(texto_tokenizado = map(.x=dataartes$text,
.f=limpiar_tokenizar))
head(texto_boric_tidy)
head(texto_kast_tidy)
#10.b. Expansión de la lista de tokens Kast
texto_kast_tidy <- datakast %>% select(texto_tokenizado) %>% unnest(cols=c(texto_tokenizado))
texto_kast_tidy <- texto_kast_tidy %>% rename(token = texto_tokenizado)
head(texto_kast_tidy)
#10.c. Expansión de la lista de tokens Provoste
texto_provoste_tidy <- dataprovoste %>% select(texto_tokenizado) %>% unnest(cols=c(texto_tokenizado))
texto_provoste_tidy <- texto_provoste_tidy %>% rename(token = texto_tokenizado)
head(texto_provoste_tidy)
#10.d. Expansión de la lista de tokens Sichel
texto_sichel_tidy <- datasichel %>% select(texto_tokenizado) %>% unnest(cols=c(texto_tokenizado))
texto_sichel_tidy <- texto_sichel_tidy %>% rename(token = texto_tokenizado)
head(texto_sichel_tidy)
#10.e. Expansión de la lista de tokens Enríquez-Ominami
texto_meo_tidy <- datameo %>% select(texto_tokenizado) %>% unnest(cols=c(texto_tokenizado))
texto_meo_tidy <- texto_meo_tidy %>% rename(token = texto_tokenizado)
head(texto_meo_tidy)
#10.a. Expansión de la lista de tokens Parisi
texto_parisi_tidy <- dataparisi %>% select(texto_tokenizado) %>% unnest(cols=c(texto_tokenizado))
texto_parisi_tidy <- texto_parisi_tidy %>% rename(token = texto_tokenizado)
head(texto_parisi_tidy)
#10.a. Expansión de la lista de tokens Artés
texto_artes_tidy <- dataartes %>% select(texto_tokenizado) %>% unnest(cols=c(texto_tokenizado))
texto_artes_tidy <- texto_artes_tidy %>% rename(token = texto_tokenizado)
head(texto_artes_tidy)
lista_stopwordsboric <- c(lista_stopwordsboric, "de", "que", "los", "se", "con", "no","si",
"Gabriel","Boric",
"gabrielboric","rt","and",
"dm","san","cta","cl","mr","ht","bco","tan",
"hrs","tantas","vez","y")
p_load(rtweet, tidyverse, wordcloud, ggplot2, stopwords)
# Se usa el paquete de pablabras a eliminar en español
lista_stopwords <- stopwords('es')
lista_stopwordsboric <- c(lista_stopwords, "de", "que", "los", "se", "con", "no","si",
"Gabriel","Boric",
"gabrielboric","rt","and",
"dm","san","cta","cl","mr","ht","bco","tan",
"hrs","tantas","vez","y")
#Filtramos las stopwords
boric_filtered <- databoric %>% filter(!(token %in% lista_stopwordsboric))
#Filtramos las stopwords
boric_filtered <- texto_boric_tidy %>% filter(!(token %in% lista_stopwordsboric))
lista_stopwordsartes <- c(lista_stopword, "de", "que", "los", "se", "con", "no","si",
"eduardo","artes",
"eduardoartes","rt","and",
"dm","san","cl","mr","ht","tan",
"hrs","tantas","vez","y")
lista_stopwordsartes <- c(lista_stopwords, "de", "que", "los", "se", "con", "no","si",
"eduardo","artes",
"eduardoartes","rt","and",
"dm","san","cl","mr","ht","tan",
"hrs","tantas","vez","y")
artes_filtered <- texto_artes_tidy %>% filter(!(token %in% lista_stopwordsartes))
lista_stopwordsprovoste<- c(lista_stopword, "de", "que", "los", "se", "con", "no","si",
"Provoste", "provosteyasna",
"Yasna","rt","and",
"dm","san","cl","mr","ht","tan",
"hrs","tantas","vez","y")
lista_stopwordsprovoste<- c(lista_stopwords, "de", "que", "los", "se", "con", "no","si",
"Provoste", "provosteyasna",
"Yasna","rt","and",
"dm","san","cl","mr","ht","tan",
"hrs","tantas","vez","y")
provoste_filtered <- texto_provoste_tidy %>% filter(!(token %in% lista_stopwordprovoste))
provoste_filtered <- texto_provoste_tidy %>% filter(!(token %in% lista_stopwordsprovoste))
lista_stopwordsmeo<- c(lista_stopwords, "de", "que", "los", "se", "con", "no","si",
"meo","me-o","marcoenriqueominami",
"marcoporchile","rt","and",
"dm","san","cta","cl","mr","ht","bco","tan",
"hrs","tantas","vez","y")
meo_filtered <- texto_meo_tidy %>% filter(!(token %in% lista_stopwordsmeo))
lista_stopwordssichel<- c(lista_stopwords, "de", "que", "los", "se", "con", "no","si",
"sichel", "sebastiansichel"
"sebastian","rt","and",
lista_stopwordssichel<- c(lista_stopwords, "de", "que", "los", "se", "con", "no","si",
"sichel", "sebastiansichel",
"sebastian","rt","and",
"dm","san","cl","mr","ht","tan",
"hrs","tantas","vez","y")
sichel_filtered <- texto_sichel_tidy %>% filter(!(token %in% lista_stopwordsichel))
sichel_filtered <- texto_sichel_tidy %>% filter(!(token %in% lista_stopwordssichel))
lista_stopwordskast <- c(lista_stopwords, "de", "que", "los", "se", "con", "no","si",
"josé", "antonio", "kast",
"joseantoniokast","rt","and",
"dm","san","cta","cl","mr","ht","bco","tan",
"hrs","tantas","vez","y")
kast_filtered <- texto_kast_tidy %>% filter(!(token %in% lista_stopwordskast))
lista_stopwordsparisi<- c(lista_stopwords, "de", "que", "los", "se", "con", "no","si",
"parisi","francoparisi", "parisioficial", "oficial","rt","and",
"dm","san","cta","cl","mr","ht","bco","tan",
"hrs","tantas","vez","y")
parisi_filtered <- texto_parisi_tidy %>% filter(!(token %in% lista_stopwordsparisi))
wordcloud(words = boric_filtered$token, freq = boric_filtered$n,
max.words= 400, random.order=FALSE, rot.per = 0.35)
wordcloud(words = boric_filtered$token,
max.words= 400, random.order=FALSE, rot.per = 0.35)
# 2.b. Se autentifica vía web browser
# token <- create_token(
#          app = "Campaign_Chile_2021",
#          consumer_key = consumer_key,
#          consumer_secret = consumer_secret,
#          access_token = access_token,
#          access_secret = access_secret)
# get_token()
p_load(rtweet, tidyverse, wordcloud, ggplot2, stopwords, wordcloud)
wordcloud(words = boric_filtered$token,
max.words= 400, random.order=FALSE, rot.per = 0.35)
p_load(rtweet, tidyverse, wordcloud, ggplot2, stopwords, wordcloud, tm)
wordcloud(words = boric_filtered$token,
max.words= 400, random.order=FALSE, rot.per = 0.35)
#12. Se generan las listas de stopwords por candidato
lista_stopwordsboric <- c(lista_stopwords, "de", "que", "los", "se", "con", "no","si",
"gabriel","boric",
"gabrielboric","rt","and",
"dm","san","cta","cl","mr","ht","bco","tan",
"hrs","tantas","vez","y")
#13. Filtrar stopwords
boric_filtered <- texto_boric_tidy %>% filter(!(token %in% lista_stopwordsboric))
wordcloud(words = boric_filtered$token,
max.words= 400, random.order=FALSE, rot.per = 0.35)
wordcloud(words = boric_filtered$token,
max.words= 300, random.order=FALSE, rot.per = 0.35)
wordcloud(words = boric_filtered$token,
max.words= 200, random.order=FALSE, rot.per = 0.35)
p_load(rtweet, tidyverse, wordcloud, ggplot2, RColorBrewer, stopwords, wordcloud, tm)
wordcloud(words = boric_filtered$token,
max.words= 200, random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
wordcloud(words = kast_filtered$token,
max.words= 200, random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
wordcloud(words = provoste_filtered$token,
max.words= 200, random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
lista_stopwordsprovoste<- c(lista_stopwords, "de", "que", "los", "se", "con", "no","si",
"provoste", "provosteyasna",
"yasna","rt","and",
"dm","san","cl","mr","ht","tan",
"hrs","tantas","vez","y")
provoste_filtered <- texto_provoste_tidy %>% filter(!(token %in% lista_stopwordsprovoste))
wordcloud(words = provoste_filtered$token,
max.words= 200, random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
wordcloud(words = sichel_filtered$token,
max.words= 200, random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
wordcloud(words = sichel_filtered$token,
max.words= 200, random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
wordcloud(words = sichel_filtered$token,
max.words= 200, min.freq = 100,
random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
wordcloud(words = sichel_filtered$token,
max.words= 200, min.freq = 500,
random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
wordcloud(words = sichel_filtered$token,
max.words= 200, min.freq = 200,
random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
wordcloud(words = sichel_filtered$token,
max.words= 200, min.freq = 200,
random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
wordcloud(words = meo_filtered$token,
max.words= 200, min.freq = 200,
random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
wordcloud(words = provoste_filtered$token,
max.words= 200, min.freq = 200,
random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
wordcloud(words = kast_filtered$token,
max.words= 200, min.freq = 200,
random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
wordcloud(words = boric_filtered$token,
max.words= 200, min.freq = 200,
random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
wordcloud(words = parisi_filtered$token,
max.words= 200, min.freq = 200,
random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
lista_stopwordsparisi<- c(lista_stopwords, "de", "que", "los", "se", "con", "no","si",
"parisi","francoparisi","franco","parisioficial",
"oficial","rt","and", "dm","san","cta","cl","mr","ht",
"bco","tan", "hrs","tantas","vez","y")
parisi_filtered <- texto_parisi_tidy %>% filter(!(token %in% lista_stopwordsparisi))
wordcloud(words = parisi_filtered$token,
max.words= 200, min.freq = 200,
random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
wordcloud(words = artes_filtered$token,
max.words= 200, min.freq = 200,
random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
lista_stopwordsartes <- c(lista_stopwords, "de", "que", "los", "se", "con", "no","si",
"eduardo","artes", "artés", "oficial",
"eduardoartes","rt","and",
"dm","san","cl","mr","ht","tan",
"hrs","tantas","vez","y")
artes_filtered <- texto_artes_tidy %>% filter(!(token %in% lista_stopwordsartes))
wordcloud(words = artes_filtered$token,
max.words= 200, min.freq = 200,
random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
wordcloud(words = meo_filtered$token,
max.words= 200, min.freq = 200,
random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
wordcloud(words = parisi_filtered$token,
max.words= 200, min.freq = 200,
random.order=FALSE, rot.per = 0.35, colors = brewer.pal(8, "Dark2"))
n_tweet_bar + scale_fill_manual(values = c("#655A7C", "#AB92BF", "#afc1d6", "#cef9f2", "#d6ca98", "#8b9b75", "#3f6c51") )
#7.b. Crear grafico de barras
n_tweet_bar <- ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar() +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
x="Candidato/a", y="Cantidad de Tweets")
n_tweet_bar + scale_fill_manual(values = c("#655A7C", "#AB92BF", "#afc1d6", "#cef9f2", "#d6ca98", "#8b9b75", "#3f6c51") )
#7.b. Crear grafico de barras
n_tweet_bar <- ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar(stat = "identity") +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
x="Candidato/a", y="Cantidad de Tweets")
n_tweet_bar + scale_fill_manual(values = c("#655A7C", "#AB92BF", "#afc1d6", "#cef9f2", "#d6ca98", "#8b9b75", "#3f6c51") )
#7.b. Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar(stat = "identity") +   scale_fill_brewer(palette="Reds") +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
x="Candidato/a", y="Cantidad de Tweets")
#7.b. Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar() +  scale_fill_brewer(palette="Reds") +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
x="Candidato/a", y="Cantidad de Tweets")
#7.b. Crear grafico de barras
n_tweet_bar <- ggplot(n_tweets, aes(x= Candidates, y= n_tweets, fill=Color)) +
geom_bar(stat = "identity") +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
x="Candidato/a", y="Cantidad de Tweets")
#7.b. Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets, fill=Color)) +
geom_bar(stat = "identity") +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
x="Candidato/a", y="Cantidad de Tweets")
#7.b. Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets, fill= "Color")) +
geom_bar(stat = "identity") +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
x="Candidato/a", y="Cantidad de Tweets")
#7.b. Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar(scale_fill_manual(values = c("#655A7C", "#AB92BF", "#afc1d6",
"#cef9f2", "#d6ca98", "#8b9b75", "#3f6c51"))) +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
x="Candidato/a", y="Cantidad de Tweets")
#7.b. Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets,
scale_fill_manual(values = c("#655A7C", "#AB92BF", "#afc1d6",
"#cef9f2", "#d6ca98", "#8b9b75", "#3f6c51")))) +
geom_bar() +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
x="Candidato/a", y="Cantidad de Tweets")
#7.b. Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar(fill= Candidates) +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
x="Candidato/a", y="Cantidad de Tweets")
#7.b. Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar() +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
x="Candidato/a", y="Cantidad de Tweets")
#7.b. Crear grafico de barras
ggplot(n_tweets, aes(x= Candidates, y= n_tweets)) +
geom_bar(stat = "identity") +
labs(title="Figura 1: Cantidad de tweets por candidate",
caption="Elaboración propia en base a Twitter API (2021)",
x="Candidato/a", y="Cantidad de Tweets")
p_load(rtweet, tidyverse, wordcloud, ggplot2, RColorBrewer, stopwords, wordcloud, tm)
install.packages("rtweet")
(13863 + 11603 + 28782 + 18829 + 13069 + 14538 + 14586)/7
#7.c. Promedio
x_tweets <- (13863 + 11603 + 28782 + 18829 + 13069 + 14538 + 14586)/7
